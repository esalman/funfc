% funfc_mciv4_save(params) plots orthogonal view of 3D data using MCIv4
% * must have a nii directory in the outpath folder. Even if you are not
% saving figures. Because it still needs to save nifti files.
% 
% Usage:
%     params = struct( ...
%         'disable', 0, ...
%         'data', data, ...
%         'sesInfo', sesInfo, ...
%         'structFile', '../bin/MCIv4/ch2bet.nii', ...
%         'title', 'title', ...
%         'savefig', 'savefig', ...
%         'outpath', '~/', ...
%         'outname', 'fig.png', ...
%         'units', 'units' ...
%     );
%     funfc_mciv4_save(params);
% 
% Input parameters:
%     disable: 0 or 1. If 1 do nothing. Because script slow
%     data: data matrix, numel = length(ones) in sesInfo.mask
%     sesInfo: ICA sesInfo
%     structFile: structural template, e.g. '../bin/MCIv4/ch2bet.nii'
%     title: title string
%     savefig: 0 or 1, to save figure or not
%     outpath: where to save figure
%     outname: output filename. No extension necessary.
%     units: unit to print next to colorbar

function [slices, fh, lim] = funfc_mciv4_save(params)

% disable
if params.disable, return, end

if ~isfield(params, 'p_th'), params.p_th = 0; end
if ~isfield(params, 'savefig'), params.savefig = 1; end
if ~isfield(params, 'units'), params.units = 't-stat'; end
if ~isfield(params, 'ncluster'), params.ncluster = 1; end
if ~isfield(params, 'minclustersize'), params.minclustersize = 1; end
if ~isfield(params, 'cmfile'), params.cmfile = jet(256); end
if ~isfield(params, 'absflag'), params.absflag = 1; end
if ~isfield(params, 'slicemethod'), params.slicemethod = 'dmax'; end
if ~isfield(params, 'threshold_high'), params.threshold_high = max(abs(params.data(:))); end

if isempty(find(params.data > 0))
    params.data( find(params.data == 0,1) ) = eps;
end

V = mci_save_as_nii(params.data, params.sesInfo, [params.outpath '/nii/'], [params.outname '.nii']);

% interpolate using canlab resample_space, and multipy with csf, white matter masks
addpath(genpath('/export/mialab/users/salman/autolabeler/current/bin/canlab/CanlabCore'))
fnames = mci_interp2struct_canlab(V.fname, [], params.structFile, [params.outpath '/nii/']);

% fnames = mci_interp2struct(V.fnlimame, [], params.structFile, [params.outpath '/nii/']);

try
    if ~isfield(params, 'threshold_low')
        [slices,fh] = mci_makeimage(fnames, params.structFile, 1, ...
            'ncluster', params.ncluster, ...
            'ch_color', '', ...
            'absflag', params.absflag, ...
            'minclustersize', params.minclustersize, ...
            'threshold_high', params.threshold_high, ...
            'datalabel', params.title, ...
            'slicemethod', params.slicemethod, ...
            'units', params.units, ...
            'cmfile', params.cmfile ...
        );
    else
        [slices,fh] = mci_makeimage(fnames, params.structFile, 1, ...
            'ncluster', params.ncluster, ...
            'ch_color', '', ...
            'absflag', params.absflag, ...
            'minclustersize', params.minclustersize, ...
            'threshold_low', params.threshold_low, ...
            'threshold_high', params.threshold_high, ...
            'datalabel', params.title, ...
            'slicemethod', params.slicemethod, ...
            'units', params.units, ...
            'cmfile', params.cmfile ...
        );
    end
catch ME
    warning(ME.message)
    return
end
if params.savefig, export_fig([params.outpath '/' params.outname, '.png'], '-r600'), end;
